# -*- coding: utf-8 -*-
"""Schema.org - NSFAwards.ipynb

Automatically generated by Colab.

Colab Secrets:

'id'         - AWS Access Key
'secret'     - AWS Secret Key
's3_region'  - AWS S3 Region
's3_bucket'  - AWS S3 Bucket
's3_key'     - AWS S3 Key
"""

!pip install -q rdflib
!pip install -q requests

import requests

from rdflib import BNode, Dataset, Graph, Literal, Namespace, RDF, URIRef, plugin
from rdflib.namespace import DCTERMS, RDFS, XSD
from rdflib.serializer import Serializer

from datetime import datetime
import hashlib
import json
import os
import re
import time
import logging

import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


from google.colab import userdata

logger = logging.getLogger()
logger.setLevel(logging.INFO)

RDF_FORMAT = 'nquads'
RDF_FILE = 'nsf_awards.nq'

API_CRITERIA = 'startDateStart=01/01/2000&fundProgramName=Oceanography'

NAMED_GRAPH = 'urn:gov:nsf:awards'
NAMED_GRAPH_URI = URIRef(NAMED_GRAPH)
PROV_NSF_AWARD_API = 'urn:gov:nsf:api:awards'
PROV_ACTIVITY = URIRef("{g}:{p}".format(g=NAMED_GRAPH, p='provenance:activity'))

PROV = Namespace("http://www.w3.org/ns/prov#")
SCHEMA = Namespace("http://schema.org/")

PI_CODE = URIRef('urn:gov:nsf:award:role:PrincipalInvestigator')
CO_PI_CODE = URIRef('urn:gov:nsf:award:role:Co-PrincipalInvestigator')


NSF_DATE_FORMAT = '%m/%d/%Y'
XSD_DATE_FORMAT = '%Y-%m-%d'

NSF_AWARDS_API_PART = 'https://www.research.gov/awardapi-service/v1/awards'
NSF_AWARDS_API_FIELDS = 'rpp,offset,id,agency,awardeeCity,awardeeCountryCode,awardeeDistrictCode,awardeeName,awardeeStateCode,awardeeZipCode,cfdaNumber,coPDPI,date,startDate,expDate,estimatedTotalAmt,fundsObligatedAmt,ueiNumber,fundProgramName,parentUeiNumber,pdPIName,perfCity,perfCountryCode,perfDistrictCode,perfLocation,perfStateCode,perfZipCode,poName,primaryProgram,transType,title,awardee,poPhone,poEmail,awardeeAddress,perfAddress,publicationResearch,publicationConference,fundAgencyCode,awardAgencyCode,projectOutComesReport,abstractText,piFirstName,piMiddeInitial,piLastName,piEmail'
NSF_AWARDS_API_URL = "{part}.json?{criteria}&printFields={fields}&offset={o}"
NSF_AWARD_URL = "{path}/{id}.json?printFields={fields}"
NSF_AWARD_API_DOCS = 'https://resources.research.gov/common/webapi/awardapisearch-v1.htm'

PAGE_SIZE = 25

FUNDERS = {}
AWARDEE = {}
PROGRAM_MGRS = {}

def get_uri(id, domain='gov:nsf', type='award', modifier=None):
  val = re.sub(r'[^a-zA-Z0-9:_\-]', '_', id)
  if modifier is not None:
    val = "{v}:{m}".format(v=val, m=re.sub(r'[^a-zA-Z0-9:_\-]', '_', modifier))
  return URIRef("urn:{d}:{t}:{v}".format(d=domain, t=type, v=val))

def md5_hash(text):
    # Convert the string to bytes (required for hashlib)
    text_bytes = text.encode('utf-8')

    # Create an MD5 hash object and update it with the bytes
    md5_hash_obj = hashlib.md5(text_bytes)

    # Get the hexadecimal representation of the hash
    hash_result = md5_hash_obj.hexdigest()

    return hash_result


def get_date(format='%Y-%m-%dT%H:%M:%SZ'):
  # Format datetime object to string
  return datetime.now().strftime(format)

def convert_date_format(date_string, from_format=NSF_DATE_FORMAT, to_format=XSD_DATE_FORMAT):
    date_object = datetime.strptime(date_string, from_format)
    return date_object.strftime(to_format)


def get_schemaorg_identifier(graph, propertyID, value, subject):
  graph.add((subject, RDF.type, SCHEMA.PropertyValue))
  graph.add((subject, SCHEMA.propertyID, Literal(propertyID, datatype=XSD.string)))
  graph.add((subject, SCHEMA.value, Literal(value, datatype=XSD.token)))

def get_awardee(graph, data):
  awardee = get_uri(type='awardee', id=data['awardee'])
  graph.add((awardee, RDF.type, SCHEMA.Organization))
  graph.add((awardee, SCHEMA.name, Literal(data['awardeeName'], datatype=XSD.string)))
  graph.add((awardee, SCHEMA.alternateName, Literal(data['awardee'], datatype=XSD.string)))
  if 'awardeeAddress' in data:
    address = get_uri(type='awardee', id=data['awardee'], modifier='address')
    graph.add((awardee, SCHEMA.address, address))
    graph.add((address, RDF.type, SCHEMA.PostalAddress))
    graph.add((address, SCHEMA.streetAddress, Literal(data['awardeeAddress'], datatype=XSD.string)))
    if 'awardeeStateCode' in data:
      graph.add((address, SCHEMA.addressRegion, Literal(data['awardeeStateCode'], datatype=XSD.string)))
    if 'awardeeCity' in data:
      graph.add((address, SCHEMA.addressLocality, Literal(data['awardeeCity'], datatype=XSD.string)))
    if 'awardeeCountryCode' in data:
      graph.add((address, SCHEMA.addressCountry, Literal(data['awardeeCountryCode'], datatype=XSD.string)))
    if 'awardeeZipCode' in data:
      graph.add((address, SCHEMA.postalCode, Literal(data['awardeeZipCode'], datatype=XSD.string)))
    if 'awardeeDistrictCode' in data:
      districtCode = get_uri(type='awardee', id=data['awardee'], modifier='address:awardeeDistrictCode')
      graph.add((address, SCHEMA.identifier, districtCode))
      get_schemaorg_identifier(graph=graph, propertyID='awardeeDistrictCode', value=data['awardeeDistrictCode'], subject=districtCode)
  AWARDEE[data['awardee']] = awardee

def get_program_manager(graph, data, funder):
  program_manager = get_uri(type='funder', id=data['agency'], modifier="po:{name}".format(name=data['poName']))
  graph.add((program_manager, RDF.type, SCHEMA.Person))
  graph.add((program_manager, SCHEMA.name, Literal(data['poName'], datatype=XSD.string)))
  graph.add((funder, SCHEMA.member, program_manager))
  graph.add((program_manager, SCHEMA.affiliation, funder))
  if 'poEmail' in data:
    graph.add((program_manager, SCHEMA.email, Literal(data['poEmail'], datatype=XSD.token)))
  if 'poPhone' in data:
    graph.add((program_manager, SCHEMA.telephone, Literal(data['poPhone'], datatype=XSD.token)))
  PROGRAM_MGRS[data['poName']] = program_manager

def get_funder(graph, award, data):
  funder = get_uri(type='funder', id=data['agency'])
  graph.add((award, SCHEMA.funder, funder))
  graph.add((funder, RDF.type, SCHEMA.Organization))
  graph.add((funder, SCHEMA.name, Literal(data['agency'], datatype=XSD.string)))
  if 'awardAgencyCode' in data:
    funder_id = get_uri(type='funder', id=data['agency'], modifier='awardAgencyCode')
    graph.add((funder, SCHEMA.identifier, funder_id))
    get_schemaorg_identifier(graph=graph, propertyID='awardAgencyCode', value=data['awardAgencyCode'], subject=funder_id)
  if 'fundAgencyCode' in data:
      fund_agency_code = get_uri(type='funder', id=data['agency'], modifier='fundAgencyCode')
      graph.add((award, SCHEMA.identifier, fund_agency_code))
      get_schemaorg_identifier(graph=graph, value=data['fundAgencyCode'], propertyID='fundAgencyCode', subject=fund_agency_code)
  FUNDERS[data['agency']] = funder


def get_nsf_awards(graph, offset=0):
  logger.info("get_nsf_awards(offset={o})".format(o=offset))

  url = NSF_AWARDS_API_URL.format(part=NSF_AWARDS_API_PART, fields=NSF_AWARDS_API_FIELDS, criteria=API_CRITERIA, o=offset)
  resp = requests.get(
        url=url,
        allow_redirects=True,
        verify=False
    )
  if resp.status_code != 200:
    raise Exception("Fail at URL: {u}".format(u=url))

  hits = json.loads(resp.text)

  for hit in hits['response']['award']:
    award = get_uri(id=hit['id'])
    graph.add((award, RDF.type, SCHEMA.MonetaryGrant))
    graph.add((award, RDF.type, SCHEMA.CreativeWork))
    graph.add((award, SCHEMA.isPartOf, NAMED_GRAPH_URI))
    award_id = get_uri(id=hit['id'], modifier='nsf-award-number')
    graph.add((award, SCHEMA.identifier, award_id))
    get_schemaorg_identifier(graph=graph, value=hit['id'], propertyID='id', subject=award_id)
    graph.add((award, SCHEMA.url, Literal(NSF_AWARD_URL.format(id=hit['id'], path=NSF_AWARDS_API_PART, fields=NSF_AWARDS_API_FIELDS), datatype=XSD.anyURI)))
    if 'title' in hit:
      graph.add((award, SCHEMA.name, Literal(hit['title'], datatype=XSD.string)))
    if 'date' in hit:
      graph.add((award, SCHEMA.dateModified, Literal(convert_date_format(hit['date']), datatype=XSD.date)))
    if 'abstractText' in hit:
      graph.add((award, SCHEMA.abstract, Literal(hit['abstractText'], datatype=XSD.string)))
    if 'transType' in hit:
      graph.add((award, SCHEMA.additionalType, Literal(hit['transType'], datatype=XSD.token)))

    # Amount
    amount = get_uri(id=hit['id'], modifier='amount')
    graph.add((award, SCHEMA.amount, amount))
    graph.add((amount, RDF.type, SCHEMA.MonetaryAmount))
    if 'estimatedTotalAmt' in hit:
      graph.add((amount, SCHEMA.maxValue, Literal(hit['estimatedTotalAmt'], datatype=XSD.decimal)))
    if 'fundsObligatedAmt' in hit:
      graph.add((amount, SCHEMA.value, Literal(hit['fundsObligatedAmt'], datatype=XSD.decimal)))

    # Dates
    temporal_cvg = None
    if 'startDate' in hit:
      start_date = convert_date_format(hit['startDate'])
      start_date_literal = Literal(start_date, datatype=XSD.date)
      graph.add((amount, SCHEMA.validFrom, start_date_literal))
      graph.add((award, SCHEMA.datePublished, start_date_literal))
      temporal_cvg = start_date
    if 'expDate' in hit:
      end_date = convert_date_format(hit['expDate'])
      end_date_literal = Literal(end_date, datatype=XSD.date)
      graph.add((amount, SCHEMA.validThrough, end_date_literal))
      graph.add((award, SCHEMA.expires, end_date_literal))
      if len(temporal_cvg) > 0:
        temporal_cvg = "{start}/{end}".format(start=temporal_cvg, end=end_date)
      else:
        temporal_cvg = "{start}/{end}".format(start=temporal_cvg, end='..')
    if temporal_cvg is not None:
      graph.add((award, SCHEMA.temporalCoverage, Literal(temporal_cvg)))

    # Funder
    if hit['agency'] not in FUNDERS:
      get_funder(graph=graph, award=award, data=hit)
    graph.add((award, SCHEMA.funder, FUNDERS[hit['agency']]))

    # Awardee
    if hit['awardee'] not in AWARDEE:
      get_awardee(graph=graph, data=hit)
    graph.add((award, SCHEMA.fundedItem, AWARDEE[hit['awardee']]))

    # Identifiers
    if 'cfdaNumber' in hit:
      cfda_number = get_uri(id=hit['cfdaNumber'], modifier='cfdaNumber')
      graph.add((award, SCHEMA.mentions, cfda_number))
      get_schemaorg_identifier(graph=graph, value=hit['cfdaNumber'], propertyID='cfdaNumber', subject=cfda_number)
    if 'ueiNumber' in hit:
      uei_number = get_uri(id=hit['ueiNumber'], modifier='ueiNumber')
      graph.add((award, SCHEMA.mentions, uei_number))
      get_schemaorg_identifier(graph=graph, value=hit['ueiNumber'], propertyID='ueiNumber', subject=uei_number)
    if 'primaryProgram' in hit:
      for pp in hit['primaryProgram']:
        primary_program = get_uri(id=hit['id'], modifier="primaryProgram:{hash}".format(hash=md5_hash(pp)))
        graph.add((award, SCHEMA.mentions, primary_program))
        get_schemaorg_identifier(graph=graph, value=pp, propertyID='primaryProgram', subject=primary_program)

    # Program
    program = None
    if 'fundProgramName' in hit:
      program = get_uri(type='program', id=hit['fundProgramName'])
      graph.add((program, SCHEMA.name, Literal(hit['fundProgramName'], datatype=XSD.string)))
    else:
      program = get_uri(type='program', id=hit['id'], modifier='program')
      graph.add((program, SCHEMA.name, Literal('Unspecified', datatype=XSD.string)))
    graph.add((award, SCHEMA.sponsor, program))
    graph.add((program, RDF.type, SCHEMA.Organziation))
    graph.add((program, SCHEMA.parentOrganization, FUNDERS[hit['agency']]))

    # Program Manager
    if 'poName' in hit:
      if hit['poName'] not in PROGRAM_MGRS:
        get_program_manager(graph=graph, data=hit, funder=FUNDERS[hit['agency']])

      pm_role = get_uri(id=hit['id'], modifier=":role:ProgramManager")
      graph.add((award, SCHEMA.maintainer, PROGRAM_MGRS[hit['poName']]))

    # Citations
    if 'publicationResearch' in hit:
      for index, pr in enumerate(hit['publicationResearch']):
        pub = get_uri(id=hit['id'], modifier="publicationResearch:{idx}".format(idx=index))
        graph.add((award, SCHEMA.citation, pub))
        graph.add((pub, RDF.type, SCHEMA.CreativeWork))
        graph.add((pub, SCHEMA.additionalType, Literal('Research Publication', datatype=XSD.string)))
        graph.add((pub, SCHEMA.description, Literal(pr, datatype=XSD.string)))

    if 'projectOutComesReport' in hit:
      report = get_uri(id=hit['id'], modifier='projectOutComesReport')
      graph.add((award, SCHEMA.citation, report))
      graph.add((report, RDF.type, SCHEMA.CreativeWork))
      graph.add((report, SCHEMA.additionalType, Literal('Project Outcomes Report', datatype=XSD.string)))
      graph.add((report, SCHEMA.text, Literal(hit['projectOutComesReport'], datatype=XSD.string)))

    # PI
    pi_role = get_uri(id=hit['id'], modifier='role:PI')
    pi_person = get_uri(id=hit['id'], modifier='role:PI:Person')
    graph.add((pi_person, RDF.type, SCHEMA.Person))
    graph.add((pi_person, SCHEMA.hasOccupation, pi_role))
    graph.add((pi_person, SCHEMA.affiliation, AWARDEE[hit['awardee']]))
    graph.add((pi_role, RDF.type, SCHEMA.Occupation))
    graph.add((pi_role, SCHEMA.occupationalCategory, PI_CODE))
    graph.add((pi_role, SCHEMA.subjectOf, award))
    graph.add((award, SCHEMA.fundedItem, pi_person))

    if 'pdPIName' in hit:
      graph.add((pi_person, SCHEMA.name, Literal(hit['pdPIName'], datatype=XSD.string)))
    if 'piFirstName' in hit:
      graph.add((pi_person, SCHEMA.givenName, Literal(hit['piFirstName'], datatype=XSD.string)))
    if 'piMiddeInitial' in hit:
      graph.add((pi_person, SCHEMA.additionalName, Literal(hit['piMiddeInitial'], datatype=XSD.string)))
    if 'piLastName' in hit:
      graph.add((pi_person, SCHEMA.familyName, Literal(hit['piLastName'], datatype=XSD.string)))
    if 'piEmail' in hit:
      graph.add((pi_person, SCHEMA.email, Literal(hit['piEmail'], datatype=XSD.token)))

    pi_address = get_uri(id=hit['id'], modifier='role:PI:Person:Address')
    graph.add((pi_person, SCHEMA.address, pi_address))
    graph.add((pi_address, RDF.type, SCHEMA.PostalAddress))
    if 'perfAddress' in hit:
      graph.add((pi_address, SCHEMA.streetAddress, Literal(hit['perfAddress'], datatype=XSD.string)))
    if 'perfLocation' in hit:
      graph.add((pi_address, SCHEMA.streetAddress, Literal(hit['perfLocation'], datatype=XSD.string)))
    if 'perfCity' in hit:
      graph.add((pi_address, SCHEMA.addressLocality, Literal(hit['perfCity'], datatype=XSD.string)))
    if 'perfStateCode' in hit:
      graph.add((pi_address, SCHEMA.addressRegion, Literal(hit['perfStateCode'], datatype=XSD.string)))
    if 'perfCountryCode' in hit:
      graph.add((pi_address, SCHEMA.addressCountry, Literal(hit['perfCountryCode'], datatype=XSD.string)))
    if 'perfZipCode' in hit:
      graph.add((pi_address, SCHEMA.postalCode, Literal(hit['perfZipCode'], datatype=XSD.string)))

    # Co-PI
    if 'coPDPI' in hit:
      for index, copi_name in enumerate(hit['coPDPI']):
        co_pi_role = get_uri(id=hit['id'], modifier="role:CoPI{idx}".format(idx=index))
        co_pi_person = get_uri(id=hit['id'], modifier="role:CoPI{idx}:Person".format(idx=index))
        graph.add((co_pi_person, RDF.type, SCHEMA.Person))
        graph.add((co_pi_person, SCHEMA.hasOccupation, co_pi_role))
        graph.add((co_pi_role, RDF.type, SCHEMA.Occupation))
        graph.add((co_pi_role, SCHEMA.occupationalCategory, CO_PI_CODE))
        graph.add((co_pi_role, SCHEMA.subjectOf, award))
        graph.add((award, SCHEMA.fundedItem, co_pi_person))
        graph.add((co_pi_person, SCHEMA.name, Literal(copi_name, datatype=XSD.string)))

  if len(hits['response']['award']) == PAGE_SIZE:
    get_nsf_awards(graph=graph, offset=(offset+PAGE_SIZE))
  else:
    logger.info("Total # of Awards: {n}".format(n=(offset+len(hits['response']['award']))))

FUNDERS = {}
AWARDEE = {}
PROGRAM_MGRS = {}

dataset = Dataset()
dataset.bind("schema", SCHEMA)
g = Graph(dataset.store, NAMED_GRAPH)

# PROV - START
g.add((PROV_ACTIVITY, RDF.type, PROV.Activity))
g.add((PROV_ACTIVITY, PROV.startedAtTime, Literal(get_date(), datatype=XSD.dateTime)))
software = get_uri(type='application', id='nsf-award-api-rdf-converter')
g.add((PROV_ACTIVITY, PROV.wasAssociatedWith, software))
g.add((software, RDF.type, PROV.SoftwareAgent))
g.add((software, RDFS.label, Literal('NSF Award API RDF Converter', datatype=XSD.string)))
g.add((NAMED_GRAPH_URI, RDF.type, SCHEMA.Dataset))
g.add((NAMED_GRAPH_URI, RDF.type, PROV.Entity))

g.add((PI_CODE, RDF.type, SCHEMA.CategoryCode))
g.add((PI_CODE, SCHEMA.name, Literal("Principal Investigator", datatype=XSD.string)))
g.add((CO_PI_CODE, RDF.type, SCHEMA.CategoryCode))
g.add((CO_PI_CODE, SCHEMA.name, Literal("Co-Principal Investigator", datatype=XSD.string)))

# AWARDS
get_nsf_awards(graph=g)

# PROV - END
g.add((PROV_ACTIVITY, PROV.endedAtTime, Literal(get_date(), datatype=XSD.dateTime)))
g.add((PROV_ACTIVITY, PROV.generated, NAMED_GRAPH_URI))
prov_entity = URIRef(PROV_NSF_AWARD_API)
g.add((PROV_ACTIVITY, PROV.used, prov_entity))
g.add((prov_entity, RDF.type, PROV.Entity))
g.add((prov_entity, SCHEMA.url, Literal(NSF_AWARDS_API_URL.format(o=0, part=NSF_AWARDS_API_PART, criteria=API_CRITERIA, fields=NSF_AWARDS_API_FIELDS), datatype=XSD.anyURI)))
g.add((prov_entity, SCHEMA.url, Literal(NSF_AWARD_API_DOCS, datatype=XSD.anyURI)))
g.add((NAMED_GRAPH_URI, PROV.wasDerivedFrom, prov_entity))


dataset.serialize(destination=RDF_FILE, format=RDF_FORMAT)

!pip install -q boto3
import boto3

s3 = boto3.client('s3',
            aws_access_key_id=userdata.get('id'),
            aws_secret_access_key=userdata.get('secret'),
            region_name=userdata.get('s3_region'))

s3.upload_file(RDF_FILE, userdata.get('s3_bucket'), userdata.get('s3_key'))
